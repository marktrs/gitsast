// Code generated by MockGen. DO NOT EDIT.
// Source: internal/queue/task/analyzer/detector.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/marktrs/gitsast/internal/model"
	analyzer "github.com/marktrs/gitsast/internal/queue/task/analyzer"
)

// MockDetector is a mock of Detector interface.
type MockDetector struct {
	ctrl     *gomock.Controller
	recorder *MockDetectorMockRecorder
}

// MockDetectorMockRecorder is the mock recorder for MockDetector.
type MockDetectorMockRecorder struct {
	mock *MockDetector
}

// NewMockDetector creates a new mock instance.
func NewMockDetector(ctrl *gomock.Controller) *MockDetector {
	mock := &MockDetector{ctrl: ctrl}
	mock.recorder = &MockDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetector) EXPECT() *MockDetectorMockRecorder {
	return m.recorder
}

// DetectIssueLocation mocks base method.
func (m *MockDetector) DetectIssueLocation(fragment analyzer.Fragment, rule *model.Rule) []*model.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectIssueLocation", fragment, rule)
	ret0, _ := ret[0].([]*model.Issue)
	return ret0
}

// DetectIssueLocation indicates an expected call of DetectIssueLocation.
func (mr *MockDetectorMockRecorder) DetectIssueLocation(fragment, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectIssueLocation", reflect.TypeOf((*MockDetector)(nil).DetectIssueLocation), fragment, rule)
}
