// Code generated by MockGen. DO NOT EDIT.
// Source: internal/queue/task/analyzer/scanner.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/marktrs/gitsast/internal/model"
	analyzer "github.com/marktrs/gitsast/internal/queue/task/analyzer"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// ScanFilesForIssues mocks base method.
func (m *MockScanner) ScanFilesForIssues(tmpDir string, paths []string, rules []*model.Rule) ([]*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanFilesForIssues", tmpDir, paths, rules)
	ret0, _ := ret[0].([]*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanFilesForIssues indicates an expected call of ScanFilesForIssues.
func (mr *MockScannerMockRecorder) ScanFilesForIssues(tmpDir, paths, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanFilesForIssues", reflect.TypeOf((*MockScanner)(nil).ScanFilesForIssues), tmpDir, paths, rules)
}

// ScanLineForIssues mocks base method.
func (m *MockScanner) ScanLineForIssues(fragment analyzer.Fragment, rules []*model.Rule) []*model.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanLineForIssues", fragment, rules)
	ret0, _ := ret[0].([]*model.Issue)
	return ret0
}

// ScanLineForIssues indicates an expected call of ScanLineForIssues.
func (mr *MockScannerMockRecorder) ScanLineForIssues(fragment, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanLineForIssues", reflect.TypeOf((*MockScanner)(nil).ScanLineForIssues), fragment, rules)
}
