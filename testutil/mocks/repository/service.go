// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/service.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/marktrs/gitsast/internal/model"
	repository "github.com/marktrs/gitsast/internal/repository"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIService) Add(ctx context.Context, req *repository.AddRepositoryRequest) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, req)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIServiceMockRecorder) Add(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIService)(nil).Add), ctx, req)
}

// CreateReport mocks base method.
func (m *MockIService) CreateReport(ctx context.Context, repoId string) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReport", ctx, repoId)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReport indicates an expected call of CreateReport.
func (mr *MockIServiceMockRecorder) CreateReport(ctx, repoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReport", reflect.TypeOf((*MockIService)(nil).CreateReport), ctx, repoId)
}

// GetById mocks base method.
func (m *MockIService) GetById(ctx context.Context, id string) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIService)(nil).GetById), ctx, id)
}

// GetReportByRepoId mocks base method.
func (m *MockIService) GetReportByRepoId(ctx context.Context, repoId string) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportByRepoId", ctx, repoId)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportByRepoId indicates an expected call of GetReportByRepoId.
func (mr *MockIServiceMockRecorder) GetReportByRepoId(ctx, repoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportByRepoId", reflect.TypeOf((*MockIService)(nil).GetReportByRepoId), ctx, repoId)
}

// List mocks base method.
func (m *MockIService) List(ctx context.Context, f *model.RepositoryFilter) ([]*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, f)
	ret0, _ := ret[0].([]*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIServiceMockRecorder) List(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIService)(nil).List), ctx, f)
}

// Remove mocks base method.
func (m *MockIService) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIServiceMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIService)(nil).Remove), ctx, id)
}

// Update mocks base method.
func (m *MockIService) Update(ctx context.Context, id string, req *repository.UpdateRepositoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIServiceMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIService)(nil).Update), ctx, id, req)
}
