// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/report.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/marktrs/gitsast/internal/model"
)

// MockIReportRepo is a mock of IReportRepo interface.
type MockIReportRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIReportRepoMockRecorder
}

// MockIReportRepoMockRecorder is the mock recorder for MockIReportRepo.
type MockIReportRepoMockRecorder struct {
	mock *MockIReportRepo
}

// NewMockIReportRepo creates a new mock instance.
func NewMockIReportRepo(ctrl *gomock.Controller) *MockIReportRepo {
	mock := &MockIReportRepo{ctrl: ctrl}
	mock.recorder = &MockIReportRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReportRepo) EXPECT() *MockIReportRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIReportRepo) Add(ctx context.Context, report *model.Report) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, report)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIReportRepoMockRecorder) Add(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIReportRepo)(nil).Add), ctx, report)
}

// GetById mocks base method.
func (m *MockIReportRepo) GetById(ctx context.Context, id string) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIReportRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIReportRepo)(nil).GetById), ctx, id)
}

// GetByRepoId mocks base method.
func (m *MockIReportRepo) GetByRepoId(ctx context.Context, id string) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRepoId", ctx, id)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRepoId indicates an expected call of GetByRepoId.
func (mr *MockIReportRepoMockRecorder) GetByRepoId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRepoId", reflect.TypeOf((*MockIReportRepo)(nil).GetByRepoId), ctx, id)
}

// GetIssues mocks base method.
func (m *MockIReportRepo) GetIssues(ctx context.Context, reportID string) ([]*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssues", ctx, reportID)
	ret0, _ := ret[0].([]*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssues indicates an expected call of GetIssues.
func (mr *MockIReportRepoMockRecorder) GetIssues(ctx, reportID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockIReportRepo)(nil).GetIssues), ctx, reportID)
}

// Update mocks base method.
func (m *MockIReportRepo) Update(ctx context.Context, report *model.Report) (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, report)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIReportRepoMockRecorder) Update(ctx, report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIReportRepo)(nil).Update), ctx, report)
}
