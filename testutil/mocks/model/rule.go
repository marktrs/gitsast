// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/rule.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/marktrs/gitsast/internal/model"
)

// MockIRuleRepo is a mock of IRuleRepo interface.
type MockIRuleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRuleRepoMockRecorder
}

// MockIRuleRepoMockRecorder is the mock recorder for MockIRuleRepo.
type MockIRuleRepoMockRecorder struct {
	mock *MockIRuleRepo
}

// NewMockIRuleRepo creates a new mock instance.
func NewMockIRuleRepo(ctrl *gomock.Controller) *MockIRuleRepo {
	mock := &MockIRuleRepo{ctrl: ctrl}
	mock.recorder = &MockIRuleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuleRepo) EXPECT() *MockIRuleRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRuleRepo) Create(ctx context.Context, rule *model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRuleRepoMockRecorder) Create(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRuleRepo)(nil).Create), ctx, rule)
}

// Delete mocks base method.
func (m *MockIRuleRepo) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRuleRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRuleRepo)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockIRuleRepo) GetAll(ctx context.Context) ([]*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRuleRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRuleRepo)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockIRuleRepo) GetByID(ctx context.Context, id uint64) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRuleRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRuleRepo)(nil).GetByID), ctx, id)
}

// GetByKeyword mocks base method.
func (m *MockIRuleRepo) GetByKeyword(ctx context.Context, keyword string) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyword", ctx, keyword)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyword indicates an expected call of GetByKeyword.
func (mr *MockIRuleRepoMockRecorder) GetByKeyword(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyword", reflect.TypeOf((*MockIRuleRepo)(nil).GetByKeyword), ctx, keyword)
}

// Update mocks base method.
func (m *MockIRuleRepo) Update(ctx context.Context, rule *model.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRuleRepoMockRecorder) Update(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRuleRepo)(nil).Update), ctx, rule)
}
